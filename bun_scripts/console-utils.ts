import chalk from "chalk";

export const visual = {
  separator: () =>
    console.log(
      chalk.gray("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"),
    ),
  header: (title: string) => {
    console.log("");
    console.log(
      chalk.bold.white(
        `‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì`,
      ),
    );
    console.log(chalk.bold.white(`‚îÉ ${title.padEnd(55)} ‚îÉ`));
    console.log(
      chalk.bold.white(
        `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ`,
      ),
    );
    console.log("");
  },
  progressBar: (percent: number) => {
    const completed = Math.round(percent * 20);
    const remaining = 20 - completed;
    return `[${"‚ñà".repeat(completed)}${" ".repeat(remaining)}] ${(percent * 100).toFixed(0)}%`;
  },
};

export const log = {
  info: (message: string) =>
    console.log(chalk.gray(`ü§ñ ${getTimestamp()} | ${message}`)),
  success: (message: string) =>
    console.log(chalk.green(`‚úÖ ${getTimestamp()} | ${message}`)),
  warning: (message: string) =>
    console.log(chalk.yellow(`‚ö†Ô∏è ${getTimestamp()} | ${message}`)),
  error: (message: string) =>
    console.log(chalk.red(`‚ùå ${getTimestamp()} | ${message}`)),
  plant: (message: string) =>
    console.log(chalk.cyan(`üå± ${getTimestamp()} | ${message}`)),
  work: (message: string) =>
    console.log(chalk.yellow(`üöú ${getTimestamp()} | ${message}`)),
  harvest: (message: string) =>
    console.log(chalk.green(`ü•¨ ${getTimestamp()} | ${message}`)),
  block: (message: string) =>
    console.log(chalk.magenta(`üì¶ ${getTimestamp()} | ${message}`)),
  schedule: (message: string) =>
    console.log(chalk.blue(`‚è∞ ${getTimestamp()} | ${message}`)),
};

// Helper function to get formatted timestamp
function getTimestamp(): string {
  return new Date().toLocaleTimeString();
}

export function formatDuration(ms: number): string {
  if (ms < 1000) return `${ms}ms`;
  if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;
  return `${(ms / 60000).toFixed(1)}min`;
}
